/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package rivermonitoringservice;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

import rivermonitoringservice.SharedMemory.SharedMemory;
import rivermonitoringservice.channelcontroller.WaterChannelController;
import rivermonitoringservice.channelcontroller.WaterChannelControllerState;
import rivermonitoringservice.data.RiverMonitoringServiceData;
import rivermonitoringservice.fsm.RiverMonitoringServiceFSM;
import rivermonitoringservice.mqtt.MqttManager;
import rivermonitoringservice.state.code.NormalState;
import rivermonitoringservice.webServer.DashboardImpl;
import rivermonitoringservice.webServer.Dashboard;

@SpringBootApplication
public class RiverMonitoringService {
    private static final Dashboard dashboard = new DashboardImpl();
    private static final RiverMonitoringServiceFSM fsm = new RiverMonitoringServiceFSM();
    private static final SharedMemory sharedMemory = new SharedMemory();
    private static final MqttManager mqttServer = new MqttManager(sharedMemory);
    private static final WaterChannelController waterChannelController = new WaterChannelController(sharedMemory); 

    public static void main(String[] args) {
        SpringApplication.run(RiverMonitoringService.class, args); // to start the dashboard
        setup();
        WaterChannelControllerState polledState;        
        while (true) {
            polledState = waterChannelController.getState();
            if (polledState == WaterChannelControllerState.UNINITIALISED) {
                System.out.println("Something wrong occurred while receiving the state of the Water Channel Controller.");
                System.exit(3);
            }
            final RiverMonitoringServiceData data = new RiverMonitoringServiceData(sharedMemory.getWaterLevel(),
                                                                                   waterChannelController.askForValveOpeningLevelPercentage(), 
                                                                                   dashboard.getUserRequestedOpeningLevel(), 
                                                                                   polledState);
            fsm.handle(data, sharedMemory);
            RiverMonitoringService.updateDashboard();
        }
    }

    private static void setup() {
        RiverMonitoringService.mqttServer.startMqttServer();
        RiverMonitoringService.fsm.changeState(new NormalState());
        System.out.println("SETUP COMPLETED!!");
    }

    public static SharedMemory serviceSharedMemory() {
        return RiverMonitoringService.sharedMemory;
    }

    public static WaterChannelController serviceWaterChannelController() {
        return waterChannelController;
    }

    public static void updateDashboard() {
        RiverMonitoringService.dashboard.refreshDashboardWithDataFromSharedMemory(RiverMonitoringService.sharedMemory);
    }

    public static void notifyDashboard() {
        RiverMonitoringService.dashboard.notifyThatRequestWasHandled();
    }

    public static void updateESPMonitoringSystem(final int mFrequency) {
        mqttServer.communicateNewMeasurementFrequency(mFrequency);
    }
}
